@page
@model BBMSRazorPages.Pages.BookingSuccessfulModel

@{
    ViewData["Title"] = "BookingSuccessful";
}

<h2>Booking Information</h2>

<div>
    @if (TempData["BookingSuccessful"] != null)
    {
        <div id="successNotification" class="success-notification" style="padding-top: 56px;">
            <span class="notification-icon">&#10004;</span>
            <span class="notification-text">@TempData["BookingSuccessful"]</span>
        </div>
    }
    @if (TempData["BookingUnsuccessful"] != null)
    {
        <div id="errorNotification" class="error-notification" style="padding-top: 56px;">
            <span class="notification-icon">&#10006;</span>
            <span class="notification-text">@TempData["BookingUnsuccessful"]</span>
        </div>
    }
    
    <hr />
    <dl class="row">
        <dt class="col-sm-2" style="font-weight: bold">
            @Html.DisplayNameFor(model => model.Booking.BookingDate)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Booking.BookingDate)
        </dd>
        <dt class="col-sm-2" style="font-weight: bold">
            @Html.DisplayNameFor(model => model.Booking.StartTime)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Booking.StartTime)
        </dd>
        <dt class="col-sm-2" style="font-weight: bold">
            @Html.DisplayNameFor(model => model.Booking.EndTime)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Booking.EndTime)
        </dd>
        <dt class="col-sm-2" style="font-weight: bold">
            @Html.DisplayNameFor(model => model.Booking.TotalPrice)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Booking.TotalPrice) VND
        </dd>
        <dt class="col-sm-2" style="font-weight: bold">
            @Html.DisplayNameFor(model => model.Booking.PaymentMethod)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Booking.PaymentMethod)
        </dd>
        @* <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Booking.Status)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Booking.Status)
        </dd> *@
        <dt class="col-sm-2" style="font-weight: bold">
            @Html.DisplayNameFor(model => model.Booking.Court)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Booking.Court.CourtName)
        </dd>
        @* <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Booking.Payment)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Booking.Payment.Id)
        </dd> *@

        @if (Model.Booking.BookingServices.Any())
        {
            <label for="services" style="font-weight: bold">Services: </label>
            <ul id="services">
                @foreach (var bookingService in Model.Booking.BookingServices)
                {
                    <li>@bookingService.Service.ServiceName: @(bookingService.Quantity)</li>
                }
            </ul>
        }

        <dt class="col-sm-2" style="font-weight: bold">
            @Html.DisplayNameFor(model => model.Booking.User)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Booking.User.Email)
        </dd>
    </dl>
    <div class="button-container">
        <form method="post">
            <input asp-for="BookingJsonString" value="@Model.BookingJsonString" class="form-control" type="hidden" />

            <button type="submit" asp-page-handler="VnPayPayment" style="font-weight: bold">Payment with VnPay</button>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        // Function to fade out the success notification after 3 seconds
        setTimeout(function () {
            var notification = document.getElementById('successNotification');
            if (notification) {
                notification.style.opacity = '0';
                setTimeout(function () {
                    notification.style.display = 'none';
                }, 1000); // Fade out animation time
            }
        }, 3000); // Display time
    </script>
}

<style>
    .success-notification {
        position: fixed;
        top: 20px;
        right: 20px;
        background-color: white;
        FFF color: #4CAF50;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        display: inline-block;
        opacity: 1;
        transition: opacity 1s ease-out;
        padding-top: 56px;
    }

    .notification-icon {
        font-size: 20px;
        margin-right: 10px;
        color: #4CAF50;
    }

    .notification-text {
        font-size: 16px;
    }

    .button-container {
        text-align: center;
    }

    .btn {
        padding: 10px 20px;
        margin: 10px;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
        color: white;
        transition: background-color 0.3s ease;
    }

        .btn.vnpay {
            background-color: #007bff; /* Blue color for VnPay */
        }

            .btn.vnpay:hover {
                background-color: #0056b3; /* Darker blue on hover */
            }

        .btn.momo {
            background-color: #800080; /* Wine purple color for Momo */
        }

            .btn.momo:hover {
                background-color: #4b004b; /* Darker wine purple on hover */
            }

    .error-notification {
        display: flex;
        align-items: center;
        background-color: #f8d7da;
        color: #721c24;
        padding: 10px;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        margin: 20px;
        font-size: 16px;
        padding-top: 56px;
    }

    .notification-icon {
        margin-right: 10px;
        color: red; /* Red color for the error icon */
        font-size: 20px;
    }
</style>

@{
    TempData.Clear();
}
