@page
@model BBMSRazorPages.Pages.ScheduleBookingModel
@{
    ViewData["Title"] = "Schedule Booking";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Court Schedule</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/BBMSRazorPages.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/styles.css" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1 style="text-align:center">Schedule Booking</h1>
    <div class="container">
        @if (TempData["BookingSuccess"] != null)
        {
            <div id="successNotification" class="success-notification">
                <span class="notification-icon">&#10004;</span>
                <span class="notification-text">@TempData["BookingSuccess"]</span>
            </div>
        }
        <p style="color: red">@TempData["PropertyRequired"]</p>
        <form method="post">
            <div class="month-year-picker">
                <label for="month">Month:</label>
                <select id="month" name="Month">
                    @for (int i = 1; i <= 12; i++)
                    {
                        bool isSelected = i - 1 == DateTime.Now.Month;
                        @if (isSelected)
                        {
                            <option value="@i" selected>@(new DateTime(Model.Year, i, 1).Month)</option>
                        }
                        else
                        {
                            <option value="@i">@(new DateTime(Model.Year, i, 1).Month)</option>
                        }

                    }
                </select>

                <label for="year">Year:</label>
                <select id="year" name="Year" onchange="updateMonthOptions()">
                    @for (int i = DateTime.Now.Year; i <= DateTime.Now.Year + 1; i++)
                    {
                        <option value="@i">@i</option>
                    }
                </select>

            </div>
            <div style="margin-top: 10px">
                Times list: <br>
                @foreach (var time in Model.TimesList)
                {
                    <div class="bordered-rectangle" onclick="toggleBackgroundColor(this)">
                        <div class="content">
                            @time
                        </div>
                    </div>
                }
            </div>
            <input type="hidden" name="FromTime" id="FromTimeInput">
            <input type="hidden" name="ToTime" id="ToTimeInput">
            <div style="margin-top: 10px">
                Days of week: <br>
                <div id="daysOfWeekContainer" class="checkbox-item">
                    @foreach (var dayOfWeek in Model.DaysOfWeek)
                    {
                        <input type="checkbox" id="@("checkbox_" + dayOfWeek)" name="SelectedDaysOfWeek" value="@dayOfWeek" onclick="updateSelectedDays()" />
                        <label for="@("checkbox_" + dayOfWeek)">@dayOfWeek</label>
                    }
                </div>
            </div>
            <div class="courts" id="availableCourtsContainer">
                @await Html.PartialAsync("_AvailableCourtsPartial", Model)
            </div>
            <div>
                Services: <br>
                <button type="button" class="add-service-button" onclick="addService()">Add Service</button>
                <div id="serviceContainer">
                    <!-- Container for dynamically added service blocks -->
                </div>
            </div>
            <div style="margin: 10px">
                <label for="paymentOption">Payment:</label>
                <select id="paymentOption" name="SelectedPaymentOptionId">
                    <option value="" disabled selected>Select a payment option</option>
                    @foreach(var paymentOption in Model.PaymentOptions)
                    {
                        <option value="@paymentOption.Id">@paymentOption.Name</option>
                    }
                </select>
            </div>
            <button type="submit" class="booking-button">Booking</button>
        </form>

    </div>
    <script>
        var currentMonth = @Model.Month;
        var currentYear = @Model.Year;

        document.addEventListener('DOMContentLoaded', function () {
            updateMonthOptions();
        });

        function updateMonthOptions() {
            var selectedYear = document.getElementById('year').value;
            var monthSelect = document.getElementById('month');
            let currentDate = new Date();
            let day = currentDate.getDate();
            console.log('Day:', day);
            const daysInMonth = @Model.DaysInCurrentMonth;
            console.log('Days in month:', daysInMonth);
            let lastDay = daysInMonth - 7;
            console.log('Last day:', lastDay);

            for (var i = 0; i < monthSelect.options.length; i++) {
                if (selectedYear == currentYear && i + 1 <= currentMonth) {
                    monthSelect.options[i].disabled = true;
                }
                else if (selectedYear == currentYear && i + 1 > currentMonth) {
                    if (day <= lastDay) {
                        console.log('Current day <= last day');
                        monthSelect.options[i].disabled = false;
                        return;
                    }
                    console.log('Current day > last day');
                    monthSelect.options[i].disabled = true;
                } else if (selectedYear > currentYear) {
                    monthSelect.options[i].disabled = false;
                }
            }
        }

        let lastClickedElement = null;
        let firstClickedElement = null;
        let secondClickedElement = null;
        let clickCounter = 0;
        let fromTime = new Date();
        let toTime = new Date();
        let rectangles = document.querySelectorAll('.bordered-rectangle');

        function toggleBackgroundColor(element) {
            if (firstClickedElement === null && secondClickedElement === null) {
                element.classList.toggle('cyan-background');
                firstClickedElement = element;
                return;
            }
            if (firstClickedElement !== null && firstClickedElement === element && secondClickedElement === null) {
                element.classList.remove('cyan-background');
                firstClickedElement = null;
                return;
            }
            if (firstClickedElement !== null && secondClickedElement === null) {
                element.classList.toggle('cyan-background');

                let secondContent = element.querySelector('.content').textContent.trim();
                let secondTimeParts = secondContent.split(':');
                fromTime.setHours(secondTimeParts[0]);
                fromTime.setMinutes(secondTimeParts[1]);

                let firstContent = firstClickedElement.querySelector('.content').textContent.trim();
                let firstTimeParts = firstContent.split(':');
                toTime.setHours(firstTimeParts[0]);
                toTime.setMinutes(firstTimeParts[1]);

                if (parseInt(secondTimeParts[0], 10) < parseInt(firstTimeParts[0], 10)) {
                    secondClickedElement = firstClickedElement;
                    firstClickedElement = element
                }
                else if ((parseInt(secondTimeParts[0], 10) == parseInt(firstTimeParts[0], 10)) && (parseInt(secondTimeParts[1], 10) < parseInt(firstTimeParts[1], 10))) {
                    secondClickedElement = firstClickedElement;
                    firstClickedElement = element
                }
                else {
                    secondClickedElement = element;
                }

                let start = false;
                rectangles.forEach(rectangle => {
                    if (!start && rectangle !== firstClickedElement) {
                        return;
                    }
                    if (!start && rectangle === firstClickedElement) {
                        start = !start;
                        return;
                    }
                    if (start && rectangle !== firstClickedElement && rectangle !== secondClickedElement) {
                        rectangle.classList.add('cyan-background');
                        return;
                    }
                    if (start && rectangle === secondClickedElement) {
                        start = !start;
                        return;
                    }
                    if (!start && rectangle !== secondClickedElement) {
                        return;
                    }

                });
                //updateDaysOfWeek(month, year, firstTimeValue, secondTimeValue);
                updateSelectedDays();
                setTimesValue(firstClickedElement, secondClickedElement);
                return;
            }
            if (firstClickedElement !== null && secondClickedElement !== null) {
                firstClickedElement.classList.remove('cyan-background');
                secondClickedElement.classList.remove('cyan-background');
                rectangles.forEach(rectangle => {
                    rectangle.classList.remove('cyan-background');

                });

                element.classList.toggle('cyan-background');
                firstClickedElement = element;
                secondClickedElement = null;
                updateSelectedDays();
                return;
            }
        }

        function updateDaysOfWeek(month, year, fromTime, toTime) {
            $.ajax({
                type: "GET",
                url: "@Url.Page("/ScheduleBooking", "UpdateDaysOfWeek")&month=" + month + "&year=" + year + "&fromTime=" + fromTime + "&toTime=" + toTime,
                success: function (result) {
                    $('#daysOfWeekContainer').html(result);
                },
                error: function (xhr, status, error) {
                    console.error("Error: " + error);
                    console.error("Status: " + status);
                    console.error(xhr);
                }
            });
        }

        function resetDaysOfWeek() {
            $.ajax({
                type: "GET",
                url: "@Url.Page("/ScheduleBooking", "ResetDaysOfWeek")",
                success: function (result) {
                    $('#daysOfWeekContainer').html(result);
                },
                error: function (xhr, status, error) {
                    console.error("Error: " + error);
                    console.error("Status: " + status);
                    console.error(xhr);
                }
            });
        }

        function disableOnClick() {
            document.getElementById('bordered-rectangle').onclick = null;
        }

        function setTimesValue(firstElement, secondElement) {
            var firstTimeValue = firstElement.querySelector('.content').innerText;
            var secondTimeValue = secondElement.querySelector('.content').innerText;

            // Set the values of the hidden inputs
            document.getElementById('FromTimeInput').value = firstTimeValue;
            document.getElementById('ToTimeInput').value = secondTimeValue;

            // Fetch request to update times on the server
            // fetch('@Url.Page("/ScheduleBooking", "SetTimes")&fromTime=' + encodeURIComponent(firstTimeValue) + "&toTime=" + encodeURIComponent(secondTimeValue), {
            //     method: 'GET'
            // })
            //     .then(response => response.json())
            //     .then(data => {
            //         if (data.success) {
            //             console.log('Time property updated successfully.');
            //         } else {
            //             console.error('Failed to update time property.');
            //         }
            //     })
            //     .catch(error => {
            //         console.error('Error updating time property:', error);
            //     });
        }

        // let serviceCounter = 0;

        // async function addService() {
        //     serviceCounter++;

        //     // Create a new service container
        //     const serviceContainer = document.createElement('div');
        //     serviceContainer.className = 'service-container';

        //     // Create a new dropdown for the service
        //     const dropdown = document.createElement('div');
        //     dropdown.className = 'dropdown';
        //     dropdown.id = `dropdown_${serviceCounter}`;

        //     // Populate the dropdown with options fetched via AJAX
        //     await fetchOptions(dropdown);

        //     // Add the dropdown to the service container
        //     serviceContainer.appendChild(dropdown);

        //     // Create an amount block for the service
        //     const amountBlock = document.createElement('div');
        //     amountBlock.className = 'amount-block';
        //     amountBlock.innerHTML = `
        //                                 <div class="amount-controls">
        //                 <input type="number" id="amountInput" name="ServicesAmount" value="1" min="1">
        //             </div>
        //                     `;

        //     // Add the amount block to the service container
        //     serviceContainer.appendChild(amountBlock);

        //     // Create a remove button
        //     const removeButton = document.createElement('button');
        //     removeButton.type = 'button';
        //     removeButton.className = 'remove-service-button';
        //     removeButton.innerText = 'Remove';
        //     removeButton.onclick = function () {
        //         removeService(serviceContainer.id);
        //     };

        //     // Add the remove button to the service container
        //     serviceContainer.appendChild(removeButton);

        //     // Append the new service container to the main container
        //     document.getElementById('serviceContainer').appendChild(serviceContainer);
        // }

        // async function fetchOptions(dropdown) {
        //     try {
        //         const response = await fetch('/ScheduleBooking?handler=ServiceOptions'); // Adjust URL as per your routing
        //         if (!response.ok) {
        //             throw new Error('Failed to fetch options');
        //         }
        //         const options = await response.json();

        //         // Populate the dropdown with fetched options
        //         dropdown.innerHTML = `
        //                                     <select class="service-select" name="SelectedServices" ">
        //                                 ${options.map(option => `<option value="${option.serviceId}">${option.serviceName}</option>`).join('')}
        //                             </select>
        //                         `;
        //     } catch (error) {
        //         console.error('Error fetching options:', error);
        //     }
        // }

        // function removeService(containerId) {
        //     const serviceContainer = document.getElementById(containerId);
        //     if (serviceContainer) {
        //         serviceContainer.remove();
        //     }
        // }

        document.addEventListener('DOMContentLoaded', (event) => {
            let serviceCounter = 0;

            async function addService() {
                serviceCounter++;

                // Create a new service container
                const serviceContainer = document.createElement('div');
                serviceContainer.className = 'service-container';
                serviceContainer.id = `serviceContainer_${serviceCounter}`;

                // Create a new dropdown for the service
                const dropdown = document.createElement('div');
                dropdown.className = 'dropdown';
                dropdown.id = `dropdown_${serviceCounter}`;

                // Populate the dropdown with options fetched via AJAX
                await fetchOptions(dropdown);

                // Add the dropdown to the service container
                serviceContainer.appendChild(dropdown);

                // Create an amount block for the service
                const amountBlock = document.createElement('div');
                amountBlock.className = 'amount-block';
                amountBlock.innerHTML = `
div class="amount-controls">
input type="number" id="amountInput" name="ServicesAmount" value="1" min="1">
div>
`;

                // Add the amount block to the service container
                serviceContainer.appendChild(amountBlock);

                // Create a remove button
                const removeButton = document.createElement('button');
                removeButton.type = 'button';
                removeButton.className = 'remove-service-button';
                removeButton.innerText = 'Remove';
                removeButton.onclick = function () {
                    console.log('Remove button clicked');
                    removeService(serviceContainer.id);
                };

                // Add the remove button to the service container
                console.log('Appending remove button to service container:', serviceContainer);
                serviceContainer.appendChild(removeButton);

                // Append the new service container to the main container
                document.getElementById('serviceContainer').appendChild(serviceContainer);
            }

            async function fetchOptions(dropdown) {
                try {
                    const response = await fetch('/ScheduleBooking?handler=ServiceOptions'); // Adjust URL as per your routing
                    if (!response.ok) {
                        throw new Error('Failed to fetch options');
                    }
                    const options = await response.json();

                    // Populate the dropdown with fetched options
                    dropdown.innerHTML = `
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <select class="service-select" name="SelectedServiceIds">
{options.map(option => `<option value="${option.serviceId}">${option.serviceName}</option>`).join('')}
select>
`;
                } catch (error) {
                    console.error('Error fetching options:', error);
                }
            }

            function removeService(containerId) {
                const serviceContainer = document.getElementById(containerId);
                if (serviceContainer) {
                    serviceContainer.remove();
                }
            }

            // Add initial event listener for addService button
            document.querySelector('.add-service-button').addEventListener('click', addService);
        });

        function updateCounter(select) {
            const selectedServiceId = select.value;
            console.log('Selected Service ID:', selectedServiceId);
            // You can now use selectedServiceId as needed (e.g., store it for further processing)
        }

        function updateSelectedDays() {
            const month = $('#month').val();
            const year = $('#year').val();
            if (firstClickedElement === null || secondClickedElement === null) {
                console.log('No time selected');
                resetAvailableCourts();
                return;
            }
            var firstTimeValue = firstClickedElement.querySelector('.content').innerText;
            if (secondClickedElement === null) {
                console.log('No time selected');
                resetAvailableCourts();
                return;
            }
            var secondTimeValue = secondClickedElement.querySelector('.content').innerText;
            const checkboxes = document.querySelectorAll('input[name="SelectedDaysOfWeek"]:checked');
            if (checkboxes.length === 0) {
                console.log('No days selected');
                resetAvailableCourts();
                return; // Terminate the function early if no checkboxes are selected
            }
            const selectedDays = Array.from(checkboxes).map(cb => cb.value);
            console.log('Selected days:', selectedDays);

            // Send the selectedDays array as a parameter in a GET request
            const params = new URLSearchParams({ days: selectedDays.join(',') }).toString();
            //const url = `/your-endpoint?${params}`;

            $.ajax({
                type: "GET",
                url: "@Url.Page("/ScheduleBooking", "UpdateAvailableCourts")&month=" + month + "&year=" + year + "&fromTime=" + firstTimeValue + "&toTime=" + secondTimeValue + "&daysOfWeek=" + params,
                success: function (result) {
                    $('#availableCourtsContainer').html(result);
                },
                error: function (xhr, status, error) {
                    console.error("Error: " + error);
                    console.error("Status: " + status);
                    console.error(xhr);
                }
            });
        }

        function resetAvailableCourts() {
            $.ajax({
                type: "GET",
                url: "@Url.Page("/ScheduleBooking", "ResetAvailableCourts")",
                success: function (result) {
                    $('#availableCourtsContainer').html(result);
                },
                error: function (xhr, status, error) {
                    console.error("Error: " + error);
                    console.error("Status: " + status);
                    console.error(xhr);
                }
            });
        }

        setTimeout(function () {
            var notification = document.getElementById('successNotification');
            if (notification) {
                notification.style.opacity = '0';
                setTimeout(function () {
                    notification.style.display = 'none';
                }, 1000); // Fade out animation time
            }
        }, 3000);
    </script>
</body>
</html>
@{
    TempData.Clear();
}
