@page
@using BBMSRazorPages.Pages.Authentication
@model BBMSRazorPages.Pages.CourtScheduleModel
@{
    ViewData["Title"] = "Court Schedule";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Court Schedule</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/BBMSRazorPages.styles.css" asp-append-version="true" />
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
        }

        th {
            background-color: #f2f2f2;
            text-align: center;
        }

/*         .booked {
            background-color: #d9534f;
        } */

        .Pending {
            background-color: yellow !important; /* Màu vàng cho trạng thái Pending hoặc null */
        }

        .Confirmed {
            background-color: #d9534f; /* Màu đỏ cho trạng thái Confirmed*/
        }

        .Completed {
            background-color: #AFE1AF; /* Màu đỏ cho trạng thái Completed */
        }

        /* Remove default spinner and adjust time picker appearance */
        input[type="time"] {
            -webkit-appearance: none;
            appearance: none;
            padding: 0.5em; /* Adjust padding as needed */
            border: 1px solid #ccc; /* Add border for clarity */
            width: 150px; /* Adjust width as needed */
        }

            /* Ensure the time picker popup is accessible */
            input[type="time"]:focus {
                outline: none; /* Optional: Remove focus outline */
            }
    </style>
</head>
<body>
    <h1 style="text-align:center;font-family:'Yu Gothic UI' ">Court Schedule</h1>
    <!-- Note Section -->
    <div class="alert alert-info text-center">
        <strong>Note:</strong>
        <span style="color: #d9534f; font-weight: bold;">Red </span>squares indicate Confirmed bookings,<br />
        <span style="color: yellow; font-weight: bold;">Yellow </span>squares indicate Pending bookings.<br />
        <span style="color: #AFE1AF; font-weight: bold;">Celadon </span>squares indicate Completed bookings.<br />

    </div>
    @if(Model.UserId != null)
    {
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#bookingModal">Book a Court</button>
    }
    @if (Model.isUserRoleAllowed())
    {
        <button type="button" class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#statusModal">Change Booking Status</button>
    }
    @if (Model.UserId != null)
    {
    <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#userStatusModal">
        Cancel My Booking
    </button>
    }

    <form id="dateForm" method="get" asp-page-handler="OnGet" style="margin:10px auto">
        <label for="datepicker">Pick a Date:</label>
        <input type="date" id="datepicker" name="bookingDate" value="@Model.BookingDate" onchange="this.form.submit()">
    </form>


    @* asp-for="@Model.SelectedDate" *@
    
    <table>
        <thead>
            <tr>
                <th>Court</th>
                @for (int hour = 5; hour <= 22; hour++)
                {
                    <th>@hour:00 - @hour:30</th>
                    <th>@hour:30 - @(hour + 1):00</th>
                }
            </tr>
        </thead>
        <tbody>
            @*var booking in Model.Bookings.DistinctBy(b => b.Court.CourtName)*@
            @foreach (var court in Model.Courts)
            {
                <tr>
                    <td>@court.CourtName @(court.PricePerHour+" VND")</td>
                    @for (int hour = 5; hour <= 22; hour++)
                    {
                        var slot1 = new TimeSpan(hour, 0, 0);
                        var slot2 = new TimeSpan(hour, 30, 0);
                        var slot3 = new TimeSpan(hour, 30, 0);
                        var slot4 = new TimeSpan(hour + 1, 0, 0);

                        bool isBookedSlot1 = Model.IsTimeSlotBooked(court, slot1, slot2);
                        var bookingStatusClass1 = Model.GetBookingStatusClass(court, slot1,slot2);

                        bool isBookedSlot2 = Model.IsTimeSlotBooked(court, slot3,slot4);
                        var bookingStatusClass2 = Model.GetBookingStatusClass(court, slot3,slot4);

                        <td class="@(isBookedSlot1 ? "booked" : "") @(bookingStatusClass1)">

                                <span></span>
                            
                        </td>
                        <td class="@(isBookedSlot2 ? "booked" : "") @(bookingStatusClass2)">

                                <span></span>
                            
                        </td>
                    }
                </tr>
            }

        </tbody>
    </table>

    <!-- Message Modal -->
    <div class="modal fade" id="messageModal" tabindex="-1" role="dialog" aria-labelledby="messageModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="messageModalLabel">Notification</h5>
                </div>
                <div class="modal-body">
                    @Model.Message
                </div>
            </div>
        </div>
    </div>


    <!-- Status Modal -->
    @if (Model.isUserRoleAllowed()) {
        <div class="modal fade" id="statusModal" tabindex="-1" aria-labelledby="statusModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="statusModalLabel">Change Booking Status</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <table class="table table-striped" id="bookingTable">
                            <thead>
                                <tr>
                                    <th>Booking ID</th>
                                    <th>Court ID</th>
                                    <th>Start Time</th>
                                    <th>End Time</th>
                                    <th>Status</th>
                                    <th>Payment Note</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var booking in Model.Bookings.Where(b => !b.Status.Equals("Cancelled")))
                                {
                                    <tr>
                                        <td>@booking.BookingId</td>
                                        <td>@booking.CourtId</td>
                                        <td>@booking.StartTime</td>
                                        <td>@booking.EndTime</td>
                                        <td>@booking.Status</td>
                                        <td>@(booking.Payment?.TransactionId ?? "Unpaid")</td>

                                        <td>
                                            <form method="post" asp-page-handler="ChangeStatus">
                                                <input type="hidden" name="BookingId" value="@booking.BookingId" />
                                                <select name="NewStatus" class="form-control" required>
                                                    <option value="">-- Select Status --</option>
                                                    <option value="Pending">Pending</option>
                                                    <option value="Confirmed">Confirmed</option>
                                                    <option value="Cancelled">Cancelled</option>
                                                </select>
                                                <input type="text" asp-for="Note" placeholder="Transaction ID or Cash" class="form-control" />
                                                <button type="submit" class="btn btn-primary btn-sm">Change Status</button>
                                            </form>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
    @* userStatusModal *@
    @if (Model.UserId!=null)
    {
        <div class="modal fade" id="userStatusModal" tabindex="-1" aria-labelledby="userStatusModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="userStatusModalLabel">All your pending booking:</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <table class="table table-striped" id="userBookingTable">
                            <thead>
                                <tr>
                                    <th>Booking ID</th>
                                    <th>Court ID</th>
                                    <th>Start Time</th>
                                    <th>End Time</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var booking in Model.Bookings.Where(b => b.UserId == Model.UserId && b.Status == "Pending"))
                                {
                                    <tr>
                                        <td>@booking.BookingId</td>
                                        <td>@booking.CourtId</td>
                                        <td>@booking.StartTime</td>
                                        <td>@booking.EndTime</td>
                                        <td>@booking.Status</td>
                                        <td>
                                            <form method="post" asp-page-handler="ChangeStatus">
                                                <input type="hidden" name="BookingId" value="@booking.BookingId" />
                                                <select name="NewStatus" class="form-control" required>
                                                    <option value="">-- Select Status --</option>
                                                    <option value="Cancelled">Cancelled</option>
                                                </select>
                                                <button type="submit" class="btn btn-primary btn-sm">Change Status</button>
                                            </form>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }


    <!-- Booking Modal -->
    <div class="modal fade" id="bookingModal" tabindex="-1" aria-labelledby="bookingModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="bookingModalLabel">Book a Court</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form method="post" id="bookingForm">
                        <div class="form-group">
                            <label asp-for="CourtId" class="control-label">Court</label>
                            <select asp-for="CourtId" class="form-control"  required onchange="fetchCourtPrice()">
                                <option value="" >-- Select Court --</option>
                                @foreach (var court in Model.Courts)
                                {
                                    <option value="@court.CourtId" data-price="@court.PricePerHour">@court.CourtName</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label asp-for="StartTime" class="control-label">Start Time</label>
                            <input asp-for="StartTime" id="StartTime" class="form-control" type="time" value="05:00" required />
                            <span id="error-message1" style="color: red; display: none;">Invalid time. Please select a time with minutes 00 or 30.</span>
                            <span id="error-message1+" style="color: red; display: none;">Invalid time. Cannot pick time in the past</span>
                        </div>
                        <div class="form-group">
                            <label asp-for="EndTime" class="control-label">End Time</label>
                            <input asp-for="EndTime" id="EndTime" class="form-control" type="time" value="06:00" required />
                            <span id="error-message2" style="color: red; display: none;">Invalid time. Please select a time with minutes 00 or 30.</span>
                            <span id="error-message2+" style="color: red; display: none;">Invalid time. Cannot pick time in the past</span>
                        </div>
                        <div class="form-group">
                            <label asp-for="DateForm" class="control-label">Date</label>
                            <input asp-for="DateForm" class="form-control" id="DateForm" type="date" value="@Model.BookingDate" required />
                        </div>
                        <div class="form-group">
                            <label asp-for="PaymentMethod" class="control-label">Payment Option</label>
                            <select asp-for="PaymentMethod" class="form-control" required>
                                <option value="">-- Select Payment Option --</option>
                                <option value="Online Banking">Online Banking</option>
                                <option value="Pay at Place">Pay at Place</option>
                            </select>
                        </div>
                        <div class="form-group align-items-center">
                            <label class="control-label mr-2">Services</label>
                            <div class="d-flex">
                                <select id="serviceSelector" class="form-control mr-2">
                                    <option value="">-- Select Service --</option>
                                    @foreach (var service in Model.Services)
                                    {
                                        <option value="@service.ServiceId" data-price="@service.ServicePrice">@service.ServiceName</option>
                                    }
                                </select>
                                <button type="button" class="btn btn-secondary btn-sm" onclick="addService()">Add Service</button>
                            </div>
                        </div>
                        <div id="servicesContainer" class="form-group" style="margin-top: 10px">
                            <!-- Services will be added here dynamically -->
                        </div>

                        <!-- Total Price Display -->
                        <div class="form-group" style="margin-top: 10px">
                            <label>Court Playtime Price: </label>
                            <span id="courtPlaytimePrice">0</span>
                        </div>
                        <div class="form-group">
                            <label>Service Price: </label>
                            <span id="servicePrice">0</span>
                        </div>
                        <div class="form-group" style="margin-bottom: 10px">
                            <label>Total Price: </label>
                            <span id="totalPrice">0</span>
                        </div>
                        <button type="submit" class="btn btn-primary">Book</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    @* <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script> *@

    <h1 style="background-color:#FFDFD6; text-align:center; margin:30px auto; font-family:'Yu Gothic UI'">Price list</h1>

    <h2>Services</h2>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var service in Model.Pricing.Services)
            {
                <tr>
                    <td>@service.ServiceName</td>
                    <td>@service.ServicePrice</td>
                </tr>
            }
        </tbody>
    </table>

    <h2>Courts</h2>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Price Per Hour</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var court in Model.Pricing.Courts)
            {
                <tr>
                    <td>@court.CourtName</td>
                    <td>@court.PricePerHour</td>
                </tr>
            }
        </tbody>
    </table>

    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
        }

        th {
            background-color: #f2f2f2;
            text-align: left;
        }
    </style>
</body>
</html>

@section Scripts {
    <!-- Include jQuery (optional, for easier DOM manipulation) -->
    @* <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script> *@
    <script>
        const formDate = document.getElementById('DateForm');
        //const inputformDate = new Date(formDate.value); 

        const today = new Date();
        const year = today.getFullYear();
        const month = String(today.getMonth() + 1).padStart(2, '0'); // Months are zero-based
        const day = String(today.getDate()).padStart(2, '0');
        const minDate = `${year}-${month}-${day}`;

        formDate.setAttribute('min', minDate);

        $(document).ready(function () {
            // Attach change event listener to the datepicker
            $('#datepicker').change(function () {
                // Submit the form when a date is picked
                $('#dateForm').submit();
            });
        });

        $(document).ready(function () {
            var message = '@Model.Message';
            if (message) {
                $('#messageModal').modal('show');
            }
        });

        // Function to handle time input changes
        function handleTimeInputChange(input) {
            var timeValue = input.value;
            var [hours, minutes] = timeValue.split(":").map(Number);

            // Round minutes to nearest 00 or 30
            minutes = Math.round(minutes / 30) * 30;

            // If minutes exceed 59, adjust hours and reset minutes
            if (minutes >= 60) {
                hours++;
                minutes = 0;
            }

            // Format hours and minutes
            var formattedHours = hours.toString().padStart(2, "0");
            var formattedMinutes = minutes.toString().padStart(2, "0");

            // Update input value
            input.value = formattedHours + ":" + formattedMinutes;
        }

        // Attach event listeners to time inputs
        document.addEventListener("DOMContentLoaded", function () {
            var timeInputs = document.querySelectorAll("input[type='time']");
            timeInputs.forEach(function (input) {
                input.addEventListener("input", function () {
                    handleTimeInputChange(this);
                });
                input.addEventListener("keydown", function (event) {
                    event.preventDefault(); // Prevent typing into the input
                });
            });
        });



        document.getElementById('bookingForm').addEventListener("submit", function (event) {
            const dateInput = document.getElementById('DateForm');
            const dateValue = dateInput.value;
            const inputformDate = new Date(dateValue);

            const startTimeInput = document.getElementById('StartTime');
            const startTimeValue = startTimeInput.value;
            const [startHours, startMinutes] = startTimeValue.split(':').map(Number);

            const endTimeInput = document.getElementById('EndTime');
            const endTimeValue = endTimeInput.value;
            const [endHours, endMinutes] = endTimeValue.split(':').map(Number);

            const now = new Date();
            const currentHours = now.getHours();
            const currentMinutes = now.getMinutes();

            // Create Date objects for comparison
            const startInputDate = new Date(inputformDate.getFullYear(), inputformDate.getMonth(), inputformDate.getDate(), startHours, startMinutes);
            const endInputDate = new Date(inputformDate.getFullYear(), inputformDate.getMonth(), inputformDate.getDate(), endHours, endMinutes);
            const currentDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), currentHours, currentMinutes);

            let isValid = true;

            // Check if start and end minutes are either 00 or 30
            if (startMinutes !== 0 && startMinutes !== 30) {
                isValid = false;
                document.getElementById('error-message1').style.display = 'inline';
            } else {
                document.getElementById('error-message1').style.display = 'none';
            }

            if (endMinutes !== 0 && endMinutes !== 30) {
                isValid = false;
                document.getElementById('error-message2').style.display = 'inline';
            } else {
                document.getElementById('error-message2').style.display = 'none';
            }

            // Check if start or end times are in the past
            if (startInputDate < currentDate) {
                isValid = false;
                document.getElementById('error-message1+').style.display = 'inline';
            } else {
                document.getElementById('error-message1+').style.display = 'none';
            }

            if (endInputDate < currentDate) {
                isValid = false;
                document.getElementById('error-message2+').style.display = 'inline';
            } else {
                document.getElementById('error-message2+').style.display = 'none';
            }

            // Prevent the form from being submitted if any validation fails
            if (!isValid) {
                event.preventDefault();
                console.log('Data is not valid');
            }
        });
        // function validateForm(event) {
            
        // }

        document.getElementById('StartTime').addEventListener('change', calculateTotalPrice);
        document.getElementById('EndTime').addEventListener('change', calculateTotalPrice);
        document.getElementById('CourtId').addEventListener('change', fetchCourtPrice);

        let courtPrice = 0;

        function fetchCourtPrice() {
            const courtSelector = document.getElementById('CourtId');
            const selectedCourtId = courtSelector.value;

            if (selectedCourtId === "") return;

            const selectedCourt = courtSelector.options[courtSelector.selectedIndex];
            courtPrice = parseFloat(selectedCourt.getAttribute('data-price')) || 0;

            calculateTotalPrice();
        }

        function addService() {
            const serviceSelector = document.getElementById('serviceSelector');
            const selectedServiceId = serviceSelector.value;
            const selectedServiceText = serviceSelector.options[serviceSelector.selectedIndex].text;
            const servicePrice = parseFloat(serviceSelector.options[serviceSelector.selectedIndex].getAttribute('data-price'));

            if (selectedServiceId === "") return;

            const servicesContainer = document.getElementById('servicesContainer');
            const serviceDiv = document.createElement('div');
            serviceDiv.className = 'form-group';

            serviceDiv.innerHTML = `
                <label>${selectedServiceText}</label>
                <input type="hidden" name="SelectedServices" value="${selectedServiceId}" data-price="${servicePrice}" />
                <input class="form-control" type="number" min="1" value="1" name="ServiceQuantities[${selectedServiceId}]" style="display: inline-block; width: auto; margin-left: 10px;" onchange="calculateTotalPrice()" />
                <button type="button" class="btn btn-danger btn-sm" onclick="removeService(this, '${selectedServiceId}')">Remove</button>
            `;

            servicesContainer.appendChild(serviceDiv);

            // Disable the selected option
            serviceSelector.options[serviceSelector.selectedIndex].disabled = true;
            serviceSelector.value = ""; // Reset the selector

            calculateTotalPrice();
        }

        function removeService(button, serviceId) {
            const serviceDiv = button.parentElement;
            serviceDiv.remove();

            // Enable the previously selected option in the dropdown
            const serviceSelector = document.getElementById('serviceSelector');
            const option = serviceSelector.querySelector(`option[value='${serviceId}']`);
            if (option) {
                option.disabled = false;
            }

            calculateTotalPrice();
        }

        function calculateTotalPrice() {
            // Calculate duration in hours
            const startTime = document.getElementById('StartTime').value;
            const endTime = document.getElementById('EndTime').value;

            if (startTime && endTime) {
                const start = new Date(`1970-01-01T${startTime}:00`);
                const end = new Date(`1970-01-01T${endTime}:00`);
                const duration = (end - start) / (1000 * 60 * 60); // Convert milliseconds to hours

                // Calculate court cost
                const courtCost = courtPrice * duration;

                // Calculate services cost
                let servicesCost = 0;
                document.querySelectorAll('#servicesContainer input[name^="ServiceQuantities"]').forEach(input => {
                    const servicePrice = parseFloat(input.previousElementSibling.getAttribute('data-price')) || 0;
                    const quantity = parseInt(input.value) || 0;
                    servicesCost += servicePrice * quantity;
                });

                // Calculate total price
                const totalPrice = courtCost + servicesCost;

                // Update the displayed prices
                document.getElementById('courtPlaytimePrice').innerText = courtCost.toFixed(2);
                document.getElementById('servicePrice').innerText = servicesCost.toFixed(2);
                document.getElementById('totalPrice').innerText = totalPrice.toFixed(2);
            } else {
                document.getElementById('courtPlaytimePrice').innerText = '0';
                document.getElementById('servicePrice').innerText = '0';
                document.getElementById('totalPrice').innerText = '0';
            }
        }

        // Initial price fetch for the selected court and services
        fetchCourtPrice();

    </script>
}
